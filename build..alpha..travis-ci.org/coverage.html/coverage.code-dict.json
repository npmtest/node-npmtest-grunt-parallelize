{"/home/travis/build/npmtest/node-npmtest-grunt-parallelize/test.js":"/* istanbul instrument in package npmtest_grunt_parallelize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/lib.npmtest_grunt_parallelize.js":"/* istanbul instrument in package npmtest_grunt_parallelize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_parallelize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_parallelize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-parallelize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_parallelize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_parallelize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_parallelize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_parallelize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_parallelize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_parallelize.__dirname + '/lib.npmtest_grunt_parallelize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/node_modules/grunt-parallelize/tasks/parallelize.js":"/*\n * grunt-parallelize\n * https://github.com/teppeis/grunt-parallelize\n *\n * Copyright (c) 2013 Teppei Sato <teppeis@gmail.com>\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar Parallelizer = require('../lib/parallelizer');\nvar taskRunner = require('../lib/taskrunner');\nvar TargetExecutor = require('../lib/targetexecutor');\nvar toBeKilled = [];\n\nmodule.exports = function(grunt) {\n  grunt.registerMultiTask('parallelize', 'Parallelize your task.', function() {\n    var args = this.nameArgs.split(':');\n    var task = args[1];\n    var target = args[2];\n    if (args.length === 1) {\n      throw new Error('grunt append the task name automatically');\n    } else if (args.length === 2) {\n      // grunt parallelize:task\n      var executor = new TargetExecutor();\n      toBeKilled.push(executor);\n      executor.exec(grunt, this.data, task, this.async());\n    } else {\n      var childFilesSrcOption = grunt.option('grunt-parallelize-child-filesSrc');\n      if (childFilesSrcOption) {\n        // this is spawned child process\n        taskRunner(grunt, childFilesSrcOption, task, target);\n      } else {\n        var parallelizer = new Parallelizer(grunt, this);\n        toBeKilled.push(parallelizer);\n        parallelizer.exec(task, target);\n      }\n    }\n  });\n};\n\nprocess.on('exit', function() {\n  toBeKilled.forEach(function(item) {\n    item.kill();\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/node_modules/grunt-parallelize/lib/parallelizer.js":"'use strict';\n\nvar fs = require('fs');\nvar util = require('util');\n\nvar _ = require('lodash');\nvar async = require('async');\nvar tmp = require('tmp');\n\nvar lpad = require('./lpad');\n\n// Remove all temporary files even if an uncaught execption occurs.\n// https://github.com/raszi/node-tmp#graceful-cleanup\ntmp.setGracefulCleanup();\n\nfunction Parallelizer(grunt, task) {\n  this.grunt_ = grunt;\n  this.task_ = task;\n  this.cpCache_ = [];\n}\n\nParallelizer.prototype.kill = function() {\n  this.cpCache_.forEach(function(el) {\n    el.kill();\n  });\n};\n\nParallelizer.prototype.exec = function(task, target) {\n  var cb = this.task_.async();\n  var splittedFilesSrc = this.getSplittedFiles_(task, target);\n\n  var spawnOptions;\n  // Optionally log the task output\n  // if (options.logConcurrentOutput) {\n  //   spawnOptions = { stdio: 'inherit' };\n  // }\n\n  var self = this;\n  lpad('    ');\n  var ok = true;\n  async.forEach(splittedFilesSrc, function(filesSrc, next) {\n    // need to put filesSrc in a temp file because of command line arg data limit\n    var prefix = ['grunt-parallelize', task, target, ''].join('-');\n    tmp.file({prefix: prefix}, function(err, tmpFile) {\n      if (err) { throw err; }\n      fs.writeFile(tmpFile, JSON.stringify(filesSrc), function (err) {\n        if (err) { throw err; }\n        var filesOption = '--grunt-parallelize-child-filesSrc=' + tmpFile;\n        var cp = self.grunt_.util.spawn({\n          grunt: true,\n          args: [['parallelize', task, target].join(':')].concat(self.grunt_.option.flags(), filesOption),\n          opts: spawnOptions\n        }, function(err, result, code) {\n          if ((err || code > 0)) {\n            ok = false;\n            if (result.stderr) {\n              self.grunt_.warn(result.stderr);\n            }\n          }\n          self.grunt_.log.write('\\n' + self.filterOutput_(result.stdout, task, target) + '\\n');\n          next();\n        });\n        self.cpCache_.push(cp);\n      });\n    });\n  }, function() {\n    lpad();\n    if (!ok) {\n      self.grunt_.log.writeln('');\n    }\n    cb(ok);\n  });\n};\n\nParallelizer.prototype.filterOutput_ = function(output, task, target) {\n  var regex = new RegExp(util.format('^.*Running \"parallelize:%s:%s\".*\\n\\n', task, target), 'g');\n  return output.replace(regex, '');\n};\n\nParallelizer.prototype.getProcesses_ = function(task, target) {\n  var processes = this.grunt_.config(['parallelize', task, target]);\n  if (typeof processes === 'number') {\n    return processes;\n  } else if (processes) {\n    processes = this.grunt_.config(['parallelize', task, 'options', 'processes']);\n    if (typeof processes === 'number') {\n      return processes;\n    }\n    processes = this.grunt_.config(['parallelize', 'options', 'processes']);\n    if (typeof processes === 'number') {\n      return processes;\n    }\n  }\n\n  throw new Error('\"processes\" option not found');\n};\n\nParallelizer.prototype.getSplittedFiles_ = function(task, target) {\n  var files = this.getNormalizedFiles_(task, target);\n  var processes = this.getProcesses_(task, target);\n\n  // if any file objects have a destination, can assume that not all src files\n  // can be merged into single list\n  if (this.hasDest_(files)) {\n    return this.splitArray_(files, processes);\n  } else {\n    var filesSrc = _(files).chain().map('src').flatten().uniq().value();\n    return this.splitArray_(filesSrc, processes).map(function(src) {\n      return {\n        src: src\n      };\n    });\n  }\n};\n\nParallelizer.prototype.getNormalizedFiles_ = function(task, target) {\n  var configPath = [task, target];\n  var config = this.grunt_.config(configPath);\n  return this.grunt_.task.normalizeMultiTaskFiles(config);\n};\n\nParallelizer.prototype.hasDest_ = function(files) {\n  return files.some(function(fileObj) {\n    return fileObj.dest !== undefined;\n  });\n};\n\nParallelizer.prototype.splitArray_ = function(arr, processes) {\n  if (processes < 0) {\n    throw new Error('\"processes\" option shoud be positive');\n  } else if (!processes) {\n    return [];\n  }\n\n  var remain = arr.length % processes;\n  var per = (arr.length - remain) / processes;\n  var splitted = [];\n  while (arr.length) {\n    splitted.push(arr.splice(0, remain-- > 0 ? per + 1 : per));\n  }\n  return splitted;\n};\n\nmodule.exports = Parallelizer;\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/node_modules/grunt-parallelize/lib/lpad.js":"'use strict';\n\nvar lpad = require('lpad');\n\nvar stdoutWrite = process.stdout.write;\n\nfunction lpadStdout(pad) {\n  process.stdout.write = pad ? function(str) {\n    stdoutWrite.call(process.stdout, lpad(str, pad));\n  } : stdoutWrite;\n}\n\nmodule.exports = lpadStdout;\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/node_modules/grunt-parallelize/lib/taskrunner.js":"'use strict';\n\nvar fs = require('fs');\n\nmodule.exports = function(grunt, childFilesSrcOption, task, target) {\n  var done = grunt.task.current.async();\n  fs.readFile(childFilesSrcOption, function (err, data) {\n    if (err) { throw err; }\n    var childFilesSrc = JSON.parse(data);\n    var configPath = [task, target];\n\n    // replace the original file config with the smaller file set assigned by\n    // the parallelizer\n    var targetCfg = grunt.config.get(configPath);\n    if (targetCfg.hasOwnProperty('dest')){\n      delete targetCfg.dest;\n    }\n    if (targetCfg.hasOwnProperty('src')){\n      delete targetCfg.src;\n    }\n    targetCfg.files = childFilesSrc;\n    grunt.config.set(configPath, targetCfg);\n\n    grunt.task.run(configPath.join(':'));\n    done();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/node_modules/grunt-parallelize/lib/targetexecutor.js":"'use strict';\n\nvar _ = require('lodash');\nvar async = require('async');\n\nvar lpad = require('./lpad');\n\nfunction TargetExecutor() {\n  this.cpCache_ = [];\n}\n\nTargetExecutor.prototype.kill = function() {\n  this.cpCache_.forEach(function(el) {\n    el.kill();\n  });\n};\n\nTargetExecutor.prototype.exec = function(grunt, data, task, callback) {\n  var targets = _.keys(data).filter(function(item) {return item !== 'options';});\n  var spawnOptions;\n  lpad('    ');\n  var ok = true;\n  async.forEachSeries(targets, function(target, next) {\n    var nameArgs = ['parallelize', task, target].join(':');\n    var cp = grunt.util.spawn({\n      grunt: true,\n      args: [nameArgs].concat(grunt.option.flags()),\n      opts: spawnOptions\n    }, function(err, result, code) {\n      if (err || code > 0) {\n        ok = false;\n        if (result.stderr) {\n          grunt.warn(result.stderr);\n        }\n      }\n      grunt.log.writeln('\\n' + result.stdout);\n      next();\n    });\n    this.cpCache_.push(cp);\n  }.bind(this), function() {\n    lpad();\n    if (!ok) {\n      grunt.log.writeln('');\n    }\n    callback(ok);\n  }.bind(this));\n};\n\nmodule.exports = TargetExecutor;\n","/home/travis/build/npmtest/node-npmtest-grunt-parallelize/node_modules/grunt-parallelize/Gruntfile.js":"/*\n * grunt-parallelize\n * https://github.com/teppeis/grunt-parallelize\n *\n * Copyright (c) 2013 Teppei Sato <teppeis@gmail.com>\n * Licensed under the MIT license.\n */\n\nmodule.exports = function(grunt) {\n  'use strict';\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        'lib/*.js',\n        '<%= mochaTest.src %>',\n      ]\n    },\n\n    // Configuration to be run (and then tested).\n    parallelize: {\n      jshint: {\n        options: {\n          processes: 2\n        },\n        all: 2\n      },\n    },\n\n    mochaTest: {\n      options: {\n        reporter: 'spec'\n      },\n      src: ['test/*_test.js'],\n    },\n\n    watch: {\n      test: {\n        files: [\n          '<%= jshint.all %>',\n          'test/**/*'\n        ],\n        tasks: ['jshint', 'test']\n      },\n    },\n\n  });\n\n  // Display the elapsed time.\n  require('time-grunt')(grunt);\n\n  // Actually load this plugin's tasks.\n  grunt.loadTasks('tasks');\n\n  // Load necessary tasks.\n  require('load-grunt-tasks')(grunt);\n\n  // Register tasks.\n  grunt.registerTask('test', ['mochaTest']);\n  grunt.registerTask('default', ['parallelize:jshint:all', 'test']);\n};\n"}